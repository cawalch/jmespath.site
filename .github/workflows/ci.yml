name: Continuous Integration

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Biome linting
      run: npm run lint

    - name: Check formatting
      run: npx biome check --formatter-enabled=true --linter-enabled=false .

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests with coverage
      run: npm run test:coverage

    - name: Check coverage thresholds
      run: |
        echo "Checking coverage thresholds..."

        COVERAGE_LINES=$(node -e "
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            console.log(coverage.total.lines.pct);
          } catch (e) {
            console.log('0');
          }
        ")

        COVERAGE_FUNCTIONS=$(node -e "
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            console.log(coverage.total.functions.pct);
          } catch (e) {
            console.log('0');
          }
        ")

        COVERAGE_BRANCHES=$(node -e "
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            console.log(coverage.total.branches.pct);
          } catch (e) {
            console.log('0');
          }
        ")

        echo "Coverage Results:"
        echo "  Lines: $COVERAGE_LINES%"
        echo "  Functions: $COVERAGE_FUNCTIONS%"
        echo "  Branches: $COVERAGE_BRANCHES%"

        # Check thresholds using Node.js for better portability
        node -e "
          const lines = parseFloat('$COVERAGE_LINES');
          const functions = parseFloat('$COVERAGE_FUNCTIONS');
          const branches = parseFloat('$COVERAGE_BRANCHES');

          let failed = false;

          if (lines < 30) {
            console.log('❌ Lines coverage (' + lines + '%) is below threshold (30%)');
            failed = true;
          } else {
            console.log('✅ Lines coverage (' + lines + '%) meets threshold (30%)');
          }

          if (functions < 15) {
            console.log('❌ Functions coverage (' + functions + '%) is below threshold (15%)');
            failed = true;
          } else {
            console.log('✅ Functions coverage (' + functions + '%) meets threshold (15%)');
          }

          if (branches < 70) {
            console.log('❌ Branches coverage (' + branches + '%) is below threshold (70%)');
            failed = true;
          } else {
            console.log('✅ Branches coverage (' + branches + '%) meets threshold (70%)');
          }

          if (failed) {
            console.log('');
            console.log('Coverage thresholds not met. Please add more tests.');
            process.exit(1);
          } else {
            console.log('');
            console.log('✅ All coverage thresholds met!');
          }
        "

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: unit-tests
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          test-results/
          coverage/
        retention-days: 7

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build site for testing
      run: npm run build

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/playwright-report/
          test-results/playwright-results.json
        retention-days: 7

  build-test:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build static site
      run: npm run build

    - name: Verify build output structure
      run: |
        echo "Verifying build output structure..."

        # Check core files
        test -f docs/index.html || (echo "❌ Missing index.html" && exit 1)
        test -f docs/style.css || (echo "❌ Missing style.css" && exit 1)
        test -f docs/versions.json || (echo "❌ Missing versions.json" && exit 1)
        test -f docs/favicon.svg || (echo "❌ Missing favicon.svg" && exit 1)

        # Check assets directory
        test -d docs/assets || (echo "❌ Missing assets directory" && exit 1)
        test -f docs/assets/main.bundle.js || (echo "❌ Missing main.bundle.js" && exit 1)

        # Check version directories exist
        if [ -d docs/current ]; then
          echo "✅ Found current version directory"
          test -f docs/current/search_index.json || (echo "❌ Missing search_index.json" && exit 1)
          test -f docs/current/search_map.json || (echo "❌ Missing search_map.json" && exit 1)
        fi

        echo "✅ Build verification passed!"

    - name: Validate JSON files
      run: |
        echo "Validating JSON files..."

        # Validate versions.json
        node -e "
          const fs = require('fs');
          try {
            const versions = JSON.parse(fs.readFileSync('docs/versions.json', 'utf8'));
            if (!versions.versions || !Array.isArray(versions.versions)) {
              throw new Error('Invalid versions.json structure');
            }
            if (!versions.defaultVersionId) {
              throw new Error('Missing defaultVersionId in versions.json');
            }
            console.log('✅ versions.json is valid');
          } catch (e) {
            console.error('❌ versions.json validation failed:', e.message);
            process.exit(1);
          }
        "

        # Validate search files if they exist
        for search_file in docs/*/search_map.json; do
          if [ -f "\$search_file" ]; then
            node -e "
              const fs = require('fs');
              try {
                const searchMap = JSON.parse(fs.readFileSync('\$search_file', 'utf8'));
                console.log('✅ \$search_file is valid');
              } catch (e) {
                console.error('❌ \$search_file validation failed:', e.message);
                process.exit(1);
              }
            "
          fi
        done

        echo "✅ JSON validation passed!"

    - name: Check bundle size
      run: |
        echo "Checking bundle sizes..."

        if [ -f docs/assets/main.bundle.js ]; then
          BUNDLE_SIZE=$(stat -f%z docs/assets/main.bundle.js 2>/dev/null || stat -c%s docs/assets/main.bundle.js)
          echo "Bundle size: $BUNDLE_SIZE bytes"

          # Warn if bundle is larger than 500KB
          if [ $BUNDLE_SIZE -gt 512000 ]; then
            echo "⚠️  Warning: Bundle size is larger than 500KB"
          else
            echo "✅ Bundle size is acceptable"
          fi
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: docs/
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=moderate

    - name: Check for known vulnerabilities
      run: |
        echo "Checking for known vulnerabilities..."
        npm audit --json > audit-results.json || true

        # Check if there are any high or critical vulnerabilities
        HIGH_VULNS=$(node -e "
          const audit = require('./audit-results.json');
          const metadata = audit.metadata || {};
          const vulnerabilities = metadata.vulnerabilities || {};
          console.log(vulnerabilities.high || 0);
        " 2>/dev/null || echo "0")

        CRITICAL_VULNS=$(node -e "
          const audit = require('./audit-results.json');
          const metadata = audit.metadata || {};
          const vulnerabilities = metadata.vulnerabilities || {};
          console.log(vulnerabilities.critical || 0);
        " 2>/dev/null || echo "0")

        if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "❌ Found $HIGH_VULNS high and $CRITICAL_VULNS critical vulnerabilities"
          echo "Please run 'npm audit fix' to resolve security issues"
          exit 1
        else
          echo "✅ No high or critical vulnerabilities found"
        fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-e2e, build-test, security]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.lint.result }}" = "success" ]; then
          echo "✅ Code Quality: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code Quality: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.test-unit.result }}" = "success" ]; then
          echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.test-e2e.result }}" = "success" ]; then
          echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.build-test.result }}" = "success" ]; then
          echo "✅ Build Verification: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Build Verification: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security.result }}" = "success" ]; then
          echo "✅ Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Scan: Failed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Fail if any tests failed
      if: needs.lint.result != 'success' || needs.test-unit.result != 'success' || needs.test-e2e.result != 'success' || needs.build-test.result != 'success' || needs.security.result != 'success'
      run: |
        echo "One or more test jobs failed"
        exit 1
