name: Coverage Report

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Generate coverage badge
      run: |
        # Extract coverage percentage from coverage summary
        COVERAGE=$(node -e "
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const lines = coverage.total.lines.pct;
            console.log(Math.round(lines));
          } catch (e) {
            console.log('0');
          }
        ")

        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV

        # Determine badge color
        if [ $COVERAGE -ge 90 ]; then
          COLOR="brightgreen"
        elif [ $COVERAGE -ge 80 ]; then
          COLOR="green"
        elif [ $COVERAGE -ge 70 ]; then
          COLOR="yellow"
        elif [ $COVERAGE -ge 60 ]; then
          COLOR="orange"
        else
          COLOR="red"
        fi

        echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));

            const formatCoverage = (cov) => {
              return `${cov.pct}% (${cov.covered}/${cov.total})`;
            };

            const total = coverage.total;

            const coverageComment = `## 📊 Coverage Report

            | Type | Coverage | Covered/Total |
            |------|----------|---------------|
            | **Lines** | **${formatCoverage(total.lines)}** | |
            | Statements | ${formatCoverage(total.statements)} | |
            | Functions | ${formatCoverage(total.functions)} | |
            | Branches | ${formatCoverage(total.branches)} | |

            ### Coverage by File

            | File | Lines | Statements | Functions | Branches |
            |------|-------|------------|-----------|----------|`;

            let fileRows = '';
            for (const [file, fileCoverage] of Object.entries(coverage)) {
              if (file !== 'total' && !file.includes('node_modules') && !file.includes('tests/')) {
                const relativePath = file.replace(process.cwd() + '/', '');
                fileRows += `\n| \`${relativePath}\` | ${fileCoverage.lines.pct}% | ${fileCoverage.statements.pct}% | ${fileCoverage.functions.pct}% | ${fileCoverage.branches.pct}% |`;
              }
            }

            const fullComment = coverageComment + fileRows + `

            ---
            *Coverage report generated by [Vitest](https://vitest.dev/) • [View full report](https://codecov.io/gh/${{ github.repository }})*`;

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('📊 Coverage Report')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: fullComment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: fullComment
              });
            }

          } catch (error) {
            console.log('Could not generate coverage comment:', error.message);
          }

    - name: Check coverage thresholds
      run: |
        echo "Checking coverage thresholds..."

        COVERAGE_LINES=$(node -e "
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            console.log(coverage.total.lines.pct);
          } catch (e) {
            console.log('0');
          }
        ")

        COVERAGE_FUNCTIONS=$(node -e "
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            console.log(coverage.total.functions.pct);
          } catch (e) {
            console.log('0');
          }
        ")

        COVERAGE_BRANCHES=$(node -e "
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            console.log(coverage.total.branches.pct);
          } catch (e) {
            console.log('0');
          }
        ")

        echo "Coverage Results:"
        echo "  Lines: $COVERAGE_LINES%"
        echo "  Functions: $COVERAGE_FUNCTIONS%"
        echo "  Branches: $COVERAGE_BRANCHES%"

        # Check thresholds using Node.js for better portability
        node -e "
          const lines = parseFloat('$COVERAGE_LINES');
          const functions = parseFloat('$COVERAGE_FUNCTIONS');
          const branches = parseFloat('$COVERAGE_BRANCHES');

          let failed = false;

          if (lines < 30) {
            console.log('❌ Lines coverage (' + lines + '%) is below threshold (30%)');
            failed = true;
          } else {
            console.log('✅ Lines coverage (' + lines + '%) meets threshold (30%)');
          }

          if (functions < 15) {
            console.log('❌ Functions coverage (' + functions + '%) is below threshold (15%)');
            failed = true;
          } else {
            console.log('✅ Functions coverage (' + functions + '%) meets threshold (15%)');
          }

          if (branches < 70) {
            console.log('❌ Branches coverage (' + branches + '%) is below threshold (70%)');
            failed = true;
          } else {
            console.log('✅ Branches coverage (' + branches + '%) meets threshold (70%)');
          }

          if (failed) {
            console.log('');
            console.log('Coverage thresholds not met. Please add more tests.');
            process.exit(1);
          } else {
            console.log('');
            console.log('✅ All coverage thresholds met!');
          }
        "

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          coverage/
        retention-days: 30
